<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distributed Thoughts</title>
    <link>https://blog.ritimgitar.com/</link>
    <description>Recent content on Distributed Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <copyright>Baris Goral</copyright>
    <lastBuildDate>Mon, 12 Apr 2021 12:07:19 +0100</lastBuildDate>
    
	<atom:link href="https://blog.ritimgitar.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Prioritization of Value over Power</title>
      <link>https://blog.ritimgitar.com/posts/2021-04-12-power-or-value/</link>
      <pubDate>Mon, 12 Apr 2021 12:07:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-04-12-power-or-value/</guid>
      <description>Power of Value Product oriented companies that exist and grow by generating value to their customers or potential customers are especially good at prioritizing what to ship and where to invest their energy. They collect sufficient enough data to estimate, validate and pivot their assumptions.
But one can not observe this in government investments or most of the large enterprise companies that I have also been part of since 7 years.</description>
    </item>
    
    <item>
      <title>Web x.0 or Neuromancer</title>
      <link>https://blog.ritimgitar.com/posts/2021-03-07-ipfs/</link>
      <pubDate>Sun, 07 Mar 2021 12:07:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-03-07-ipfs/</guid>
      <description>Web 3.0 There is a lot of buzz about Web 3.0 out there and Its not new. When people got used to the term Web 2.0, academics, experts and sales teams was already there. The oldest article that I can find is from 2005 with the title &amp;ldquo;What to expect from Web 3.0&amp;rdquo;.
If I look at the year 2005, the world was different. We were, like most of the world, trying to build for the Web, transforming our mind, businesses and customers.</description>
    </item>
    
    <item>
      <title>Heaviest Password Generator</title>
      <link>https://blog.ritimgitar.com/posts/2021-02-14-heavypass/</link>
      <pubDate>Mon, 15 Feb 2021 12:07:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-02-14-heavypass/</guid>
      <description>HeavyPass I think the future of authentication will be passwordless. We are very close to that future but not there yet. Still, most of the applications require username and passwords, but enhancing with additional validation methods (Multi Factor Authentication) like SMS, Authenticator Apps, Biometric scanning etc. In addition to that, users are being forced to change their passwords after some time and mostly not allowed to use one of the last 3 passwords.</description>
    </item>
    
    <item>
      <title>How Dapr works?</title>
      <link>https://blog.ritimgitar.com/posts/2021-01-24-dapr-local/</link>
      <pubDate>Sun, 24 Jan 2021 18:35:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-01-24-dapr-local/</guid>
      <description>What is Dapr?  Dapr is a portable, event-driven runtime that makes it easy for any developer to build resilient, stateless and stateful applications that run on the cloud and edge and embraces the diversity of languages and developer frameworks.
 For me, this statement is definition of a remarkable modern solution to many complexities so I wanted to try and built a geocoding service using libpostal integrated to dapr sidecar.</description>
    </item>
    
    <item>
      <title>What about resiliency?</title>
      <link>https://blog.ritimgitar.com/posts/2021-01-16-resiliency/</link>
      <pubDate>Sat, 16 Jan 2021 11:18:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-01-16-resiliency/</guid>
      <description>In the reactive manifesto resilient systems described as:
 Resilient: The system stays responsive in the face of failure. This applies not only to highly-available, mission-critical systems — any system that is not resilient will be unresponsive after a failure. Link
 Although there is a kind of philosophical manifesto available written/signed by builders, I believe, the expectation from the writers of this manifesto was always to build resilient things under chaos, uncertainty and continuous change.</description>
    </item>
    
    <item>
      <title>JAM Stack - Hugo - Blackout</title>
      <link>https://blog.ritimgitar.com/posts/2021-01-10-hugo-jam/</link>
      <pubDate>Sun, 10 Jan 2021 11:18:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-01-10-hugo-jam/</guid>
      <description>In 2013, I was working as a technical lead for the company website transformation project for an electric distribution company. The technology was preselected by the upper management (SharePoint) and the contract was already signed. I was going to assure the quality of delivery. The old website was also SharePoint and it was too expensive to scale and maintain. Of course, I am not going to mention about the cost of license, development and infrastructure of this new website but this was (probably today in many organizations) the situation more or less 10 years ago.</description>
    </item>
    
    <item>
      <title>Fundamentals</title>
      <link>https://blog.ritimgitar.com/posts/2021-01-07-fundamentals/</link>
      <pubDate>Thu, 07 Jan 2021 09:00:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-01-07-fundamentals/</guid>
      <description>I restarted this blog to go back, remind and remember the fundamentals that brought me here. Fundamentals are the compass that keeps mind and reality together. Joel Goldberg, 45 years experienced software engineering veteran wrote a great article about basics. I put here to remind and remember.
 Focus on the Fundamentals Technology constantly changes, but some fundamental approaches to software development transcend these trends. Here are six fundamentals that will continue to be relevant for a long time.</description>
    </item>
    
    <item>
      <title>8 Deadly Sins of Distributed Systems</title>
      <link>https://blog.ritimgitar.com/posts/2020-12-30-fallacies/</link>
      <pubDate>Wed, 30 Dec 2020 20:07:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2020-12-30-fallacies/</guid>
      <description>There are 8 deadly sins mostly ignored when designing and implementing distributed applications. I want to start my blog with analysis of these points:
 The network is reliable; Latency is zero; Bandwidth is infinite; The network is secure; Topology doesn&amp;rsquo;t change; There is one administrator; Transport cost is zero; The network is homogeneous.  1. Network is reliable Let&amp;rsquo;s be honest, the network is never reliable. And in most of the cases is the &amp;ldquo;scapegoat&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://blog.ritimgitar.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ritimgitar.com/about/</guid>
      <description>My name is Baris, I am a software engineer &amp;amp; architect from Istanbul. I live in Germany since 2019.
Distributed Thoughts is my second blog and I will write about tech, software development &amp;amp; architecture, future and life. If you want to reach me, you can use the links below;
 Linkedin: Baris Göral Github: bgoral  </description>
    </item>
    
  </channel>
</rss>