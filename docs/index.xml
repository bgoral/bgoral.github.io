<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distributed Thoughts</title>
    <link>https://blog.ritimgitar.com/</link>
    <description>Recent content on Distributed Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <copyright>Baris Goral</copyright>
    <lastBuildDate>Sat, 16 Jan 2021 11:18:19 +0100</lastBuildDate>
    
	<atom:link href="https://blog.ritimgitar.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How Dapr works?</title>
      <link>https://blog.ritimgitar.com/posts/2021-01-24-dapr-local/</link>
      <pubDate>Sat, 16 Jan 2021 11:18:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-01-24-dapr-local/</guid>
      <description>What is Dapr?  Dapr is a portable, event-driven runtime that makes it easy for any developer to build resilient, stateless and stateful applications that run on the cloud and edge and embraces the diversity of languages and developer frameworks.
 For me, this statement is definition of a remarkable modern solution to many complexities so I wanted to try and built a geocoding service using libpostal integrated to dapr sidecar.</description>
    </item>
    
    <item>
      <title>What about resiliency?</title>
      <link>https://blog.ritimgitar.com/posts/2021-01-16-resiliency/</link>
      <pubDate>Sat, 16 Jan 2021 11:18:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-01-16-resiliency/</guid>
      <description>In the reactive manifesto resilient systems described as:
 Resilient: The system stays responsive in the face of failure. This applies not only to highly-available, mission-critical systems — any system that is not resilient will be unresponsive after a failure. Link
 Although there is a kind of philosophical manifesto available written/signed by builders, I believe, the expectation from the writers of this manifesto was always to build resilient things under chaos, uncertainty and continuous change.</description>
    </item>
    
    <item>
      <title>JAM Stack - Hugo - Blackout</title>
      <link>https://blog.ritimgitar.com/posts/2021-01-10-hugo-jam/</link>
      <pubDate>Sun, 10 Jan 2021 11:18:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-01-10-hugo-jam/</guid>
      <description>In 2013, I was working as a technical lead for the company website transformation project. The technology was preselected by the vendor and upper management (SharePoint) and the contract was already signed. I was going to assure the quality of delivery. The old website was also SharePoint and it was too expensive to scale and maintain. Of course, I am not going to mention about the cost of licence, development and infrastructure of this new website but this was (probably today in many organizations) the situation more or less 10 years ago.</description>
    </item>
    
    <item>
      <title>Fundamentals</title>
      <link>https://blog.ritimgitar.com/posts/2021-01-07-fundamentals/</link>
      <pubDate>Thu, 07 Jan 2021 09:00:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2021-01-07-fundamentals/</guid>
      <description>I restarted this blog to go back, remind and remember the fundamentals that brought me here. Fundamentals are the compass that keeps mind and reality together. Joel Goldberg, 45 years experienced software engineering veteran wrote a great article about basics. I put here to remind and remember.
 Focus on the Fundamentals Technology constantly changes, but some fundamental approaches to software development transcend these trends. Here are six fundamentals that will continue to be relevant for a long time.</description>
    </item>
    
    <item>
      <title>8 Deadly Sins of Distributed Systems</title>
      <link>https://blog.ritimgitar.com/posts/2020-12-30-fallacies/</link>
      <pubDate>Wed, 30 Dec 2020 20:07:19 +0100</pubDate>
      
      <guid>https://blog.ritimgitar.com/posts/2020-12-30-fallacies/</guid>
      <description>There are 8 deadly sins mostly ignored when designing and implementing distributed applications. I want to start my blog with analysis of these points:
 The network is reliable; Latency is zero; Bandwidth is infinite; The network is secure; Topology doesn&amp;rsquo;t change; There is one administrator; Transport cost is zero; The network is homogeneous.  1. Network is reliable Let&amp;rsquo;s be honest, the network is never reliable. And in most of the cases is the &amp;ldquo;scapegoat&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://blog.ritimgitar.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ritimgitar.com/about/</guid>
      <description>My name is Baris, I am a software engineer &amp;amp; architect from Istanbul. I live in Germany since 2019.
This is my second blog. First one was vanished after a -very sad story- server crash. This second attempt is about tech, software development &amp;amp; architecture, future and life.
 Linkedin: Baris Göral Github: bgoral  </description>
    </item>
    
  </channel>
</rss>